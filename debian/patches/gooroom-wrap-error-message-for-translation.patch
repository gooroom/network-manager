diff --git a/libnm-core/nm-connection.c b/libnm-core/nm-connection.c
index 5f406cc..f9bb8a0 100644
--- a/libnm-core/nm-connection.c
+++ b/libnm-core/nm-connection.c
@@ -2148,7 +2148,8 @@ _nm_connection_verify_required_interface_name (NMConnection *connection,
 	                     NM_CONNECTION_ERROR,
 	                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 	                     _("property is missing"));
-	g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_INTERFACE_NAME);
+//	g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_INTERFACE_NAME);
+	nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_INTERFACE_NAME);
 	return FALSE;
 }
 
diff --git a/libnm-core/nm-setting-bond.c b/libnm-core/nm-setting-bond.c
index 0c84b3a..f170319 100644
--- a/libnm-core/nm-setting-bond.c
+++ b/libnm-core/nm-setting-bond.c
@@ -563,7 +563,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("invalid option '%s' or its value '%s'"),
 			             key, value);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -589,7 +591,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             _("only one of '%s' and '%s' can be set"),
 		             NM_SETTING_BOND_OPTION_MIIMON,
 		             NM_SETTING_BOND_OPTION_ARP_INTERVAL);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return FALSE;
 	}
 
@@ -601,7 +605,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("mandatory option '%s' is missing"),
 		             NM_SETTING_BOND_OPTION_MODE);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return FALSE;
 	}
 	mode = nm_utils_bond_mode_string_to_int (mode_orig);
@@ -611,7 +617,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%s' is not a valid value for '%s'"),
 		             value, NM_SETTING_BOND_OPTION_MODE);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return FALSE;
 	}
 	mode_new = nm_utils_bond_mode_int_to_string (mode);
@@ -625,7 +633,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s=%s' is incompatible with '%s > 0'"),
 			             NM_SETTING_BOND_OPTION_MODE, mode_new, NM_SETTING_BOND_OPTION_ARP_INTERVAL);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -640,7 +650,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' is not valid for the '%s' option: %s"),
 			             primary, NM_SETTING_BOND_OPTION_PRIMARY, tmp_error->message);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			g_error_free (tmp_error);
 			return FALSE;
 		}
@@ -652,7 +664,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             _("'%s' option is only valid for '%s=%s'"),
 			             NM_SETTING_BOND_OPTION_PRIMARY,
 			             NM_SETTING_BOND_OPTION_MODE, "active-backup");
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -664,7 +678,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s=%s' is not a valid configuration for '%s'"),
 			             NM_SETTING_BOND_OPTION_MODE, mode_new, NM_SETTING_INFINIBAND_SETTING_NAME);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -677,7 +693,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option requires '%s' option to be set"),
 			             NM_SETTING_BOND_OPTION_UPDELAY, NM_SETTING_BOND_OPTION_MIIMON);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 		if (g_hash_table_lookup (priv->options, NM_SETTING_BOND_OPTION_DOWNDELAY)) {
@@ -686,7 +704,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option requires '%s' option to be set"),
 			             NM_SETTING_BOND_OPTION_DOWNDELAY, NM_SETTING_BOND_OPTION_MIIMON);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -706,7 +726,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option requires '%s' option to be set"),
 			             NM_SETTING_BOND_OPTION_ARP_INTERVAL, NM_SETTING_BOND_OPTION_ARP_IP_TARGET);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 
@@ -717,7 +739,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option is empty"),
 			             NM_SETTING_BOND_OPTION_ARP_IP_TARGET);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			g_strfreev (addrs);
 			return FALSE;
 		}
@@ -729,7 +753,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 				             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 				             _("'%s' is not a valid IPv4 address for '%s' option"),
 				             NM_SETTING_BOND_OPTION_ARP_IP_TARGET, addrs[i]);
-				g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//				g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+				nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                        NM_SETTING_BOND_OPTIONS);
 				g_strfreev (addrs);
 				return FALSE;
 			}
@@ -742,7 +768,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option requires '%s' option to be set"),
 			             NM_SETTING_BOND_OPTION_ARP_IP_TARGET, NM_SETTING_BOND_OPTION_ARP_INTERVAL);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
 			return FALSE;
 		}
 	}
@@ -757,7 +785,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%s' option is only valid with mode '%s'"),
 		             NM_SETTING_BOND_OPTION_LACP_RATE, "802.3ad");
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return FALSE;
 	}
 
@@ -769,7 +799,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             _("'%s' and '%s' cannot have different values"),
 		             NM_SETTING_BOND_OPTION_NUM_GRAT_ARP,
 		             NM_SETTING_BOND_OPTION_NUM_UNSOL_NA);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return FALSE;
 	}
 
@@ -784,7 +816,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%s' option should be string"),
 		             NM_SETTING_BOND_OPTION_MODE);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                NM_SETTING_BOND_OPTIONS);
 		return NM_SETTING_VERIFY_NORMALIZABLE;
 	}
 
@@ -800,7 +834,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' option is not valid with mode '%s'"),
 			             key, mode_new);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_BOND_SETTING_NAME, NM_SETTING_BOND_OPTIONS);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_BOND_SETTING_NAME,
+                                                    NM_SETTING_BOND_OPTIONS);
+
 			return NM_SETTING_VERIFY_NORMALIZABLE;
 		}
 	}
diff --git a/libnm-core/nm-setting-bridge.c b/libnm-core/nm-setting-bridge.c
index 71fe2ed..7444eed 100644
--- a/libnm-core/nm-setting-bridge.c
+++ b/libnm-core/nm-setting-bridge.c
@@ -228,7 +228,8 @@ check_range (guint32 val,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("value '%d' is out of range <%d-%d>"),
 		             val, min, max);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, prop);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, prop);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BRIDGE_SETTING_NAME, prop);
 		return FALSE;
 	}
 	return TRUE;
@@ -244,7 +245,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("is not a valid MAC address"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, NM_SETTING_BRIDGE_MAC_ADDRESS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, NM_SETTING_BRIDGE_MAC_ADDRESS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BRIDGE_SETTING_NAME,
+                                                NM_SETTING_BRIDGE_MAC_ADDRESS);
 		return FALSE;
 	}
 
@@ -285,7 +288,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("the mask can't contain bits 0 (STP), 1 (MAC) or 2 (LACP)"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, NM_SETTING_BRIDGE_GROUP_FORWARD_MASK);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_BRIDGE_SETTING_NAME, NM_SETTING_BRIDGE_GROUP_FORWARD_MASK);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_BRIDGE_SETTING_NAME,
+                                                NM_SETTING_BRIDGE_GROUP_FORWARD_MASK);
+
 		return FALSE;
 	}
 
diff --git a/libnm-core/nm-setting-cdma.c b/libnm-core/nm-setting-cdma.c
index a5d5428..f5e7b60 100644
--- a/libnm-core/nm-setting-cdma.c
+++ b/libnm-core/nm-setting-cdma.c
@@ -155,14 +155,16 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		                     _("property is missing"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
 		return FALSE;
 	} else if (!strlen (priv->number)) {
 		g_set_error_literal (error,
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
 		return FALSE;
 	}
 
@@ -171,7 +173,8 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_USERNAME);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_USERNAME);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CDMA_SETTING_NAME, NM_SETTING_CDMA_NUMBER);
 		return FALSE;
 	}
 
diff --git a/libnm-core/nm-setting-connection.c b/libnm-core/nm-setting-connection.c
index 44021b9..4183128 100644
--- a/libnm-core/nm-setting-connection.c
+++ b/libnm-core/nm-setting-connection.c
@@ -945,14 +945,18 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		                     _("property is missing"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_ID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_ID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_ID);
 		return FALSE;
 	} else if (!priv->id[0]) {
 		g_set_error_literal (error,
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_ID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_ID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_ID);
 		return FALSE;
 	}
 
@@ -962,7 +966,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%s' is not a valid UUID"),
 		             priv->uuid);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_UUID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_UUID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_UUID);
 		return FALSE;
 	}
 
@@ -974,7 +980,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR,
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             "'%s': %s", priv->interface_name, tmp_error->message);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_INTERFACE_NAME);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_INTERFACE_NAME);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_INTERFACE_NAME);
 			g_error_free (tmp_error);
 			return FALSE;
 		}
@@ -988,7 +996,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			                     NM_CONNECTION_ERROR,
 			                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 			                     _("property is missing"));
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_TYPE);
 			return FALSE;
 		}
 		type = nm_setting_get_name (normerr_base_type);
@@ -1000,7 +1010,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			                     NM_CONNECTION_ERROR,
 			                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			                     _("property is empty"));
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_TYPE);
 			return FALSE;
 		}
 
@@ -1012,7 +1024,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("connection type '%s' is not valid"),
 			             type);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_TYPE);
 			return FALSE;
 		}
 
@@ -1047,7 +1061,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR,
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("Unknown slave type '%s'"), slave_type);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_SLAVE_TYPE);
 			return FALSE;
 		}
 	}
@@ -1058,7 +1074,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR,
 			             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 			             _("Slave connections need a valid '%s' property"), NM_SETTING_CONNECTION_MASTER);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_MASTER);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_MASTER);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_MASTER);
 			return FALSE;
 		}
 		if (   slave_setting_type
@@ -1080,7 +1098,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 				             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 				             _("Cannot set '%s' without '%s'"),
 				             NM_SETTING_CONNECTION_MASTER, NM_SETTING_CONNECTION_SLAVE_TYPE);
-				g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+//				g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+				nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                        NM_SETTING_CONNECTION_SLAVE_TYPE);
 				return FALSE;
 			}
 		}
@@ -1096,7 +1116,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_SETTING_OVS_PORT_SETTING_NAME,
 		             NM_SETTING_OVS_BRIDGE_SETTING_NAME,
 		             slave_type);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_SLAVE_TYPE);
 		return FALSE;
 	}
 
@@ -1107,8 +1129,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("metered value %d is not valid"), priv->metered);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
-		                NM_SETTING_CONNECTION_METERED);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
+//		                NM_SETTING_CONNECTION_METERED);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_METERED);
 		return FALSE;
 	}
 
@@ -1118,8 +1142,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("value %d is not valid"), priv->mdns);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
-		                NM_SETTING_CONNECTION_MDNS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
+//		                NM_SETTING_CONNECTION_MDNS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_MDNS);
 		return FALSE;
 	}
 
@@ -1129,8 +1155,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("value %d is not valid"), priv->llmnr);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
-		                NM_SETTING_CONNECTION_LLMNR);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
+//		                NM_SETTING_CONNECTION_LLMNR);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_LLMNR);
 		return FALSE;
 	}
 
@@ -1142,8 +1170,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("value %d is not valid"), priv->multi_connect);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
-		                NM_SETTING_CONNECTION_MULTI_CONNECT);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME,
+//		                NM_SETTING_CONNECTION_MULTI_CONNECT);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_MULTI_CONNECT);
 		return FALSE;
 	}
 
@@ -1154,7 +1184,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		                     _("property is missing"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_UUID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_UUID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_UUID);
 		return NM_SETTING_VERIFY_NORMALIZABLE_ERROR;
 	}
 
@@ -1164,7 +1196,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		             _("property type should be set to '%s'"),
 		             nm_setting_get_name (normerr_base_type));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_TYPE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_TYPE);
 		return NM_SETTING_VERIFY_NORMALIZABLE_ERROR;
 	}
 
@@ -1190,7 +1224,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             _("Detect a slave connection with '%s' set and a port type '%s'. '%s' should be set to '%s'"),
 		             NM_SETTING_CONNECTION_MASTER, normerr_missing_slave_type_port,
 		             NM_SETTING_CONNECTION_SLAVE_TYPE, normerr_missing_slave_type);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                NM_SETTING_CONNECTION_SLAVE_TYPE);
 		return NM_SETTING_VERIFY_NORMALIZABLE_ERROR;
 	}
 
@@ -1207,7 +1243,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             _("A slave connection with '%s' set to '%s' cannot have a '%s' setting"),
 			             NM_SETTING_CONNECTION_SLAVE_TYPE, priv->slave_type ?: "",
 			             has_bridge_port ? NM_SETTING_BRIDGE_PORT_SETTING_NAME : NM_SETTING_TEAM_PORT_SETTING_NAME);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_CONNECTION_SETTING_NAME, NM_SETTING_CONNECTION_SLAVE_TYPE);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_CONNECTION_SETTING_NAME,
+                                                    NM_SETTING_CONNECTION_SLAVE_TYPE);
 			return NM_SETTING_VERIFY_NORMALIZABLE_ERROR;
 		}
 	}
diff --git a/libnm-core/nm-setting-gsm.c b/libnm-core/nm-setting-gsm.c
index b31da68..7735084 100644
--- a/libnm-core/nm-setting-gsm.c
+++ b/libnm-core/nm-setting-gsm.c
@@ -295,7 +295,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NUMBER);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NUMBER);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                NM_SETTING_GSM_NUMBER);
+
 		return FALSE;
 	}
 
@@ -309,7 +312,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("property value '%s' is empty or too long (>64)"),
 			             priv->apn);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_APN);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_APN);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                    NM_SETTING_GSM_APN);
 			return FALSE;
 		}
 
@@ -341,7 +346,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 				             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 				             _("'%s' contains invalid char(s) (use [A-Za-z._-])"),
 				             priv->apn);
-				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_APN);
+//				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_APN);
+				nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                        NM_SETTING_GSM_APN);
 				return FALSE;
 			}
 		}
@@ -352,7 +359,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_USERNAME);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_USERNAME);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                NM_SETTING_GSM_USERNAME);
 		return FALSE;
 	}
 
@@ -367,7 +376,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' length is invalid (should be 5 or 6 digits)"),
 			             priv->network_id);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NETWORK_ID);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NETWORK_ID);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                    NM_SETTING_GSM_NETWORK_ID);
 			return FALSE;
 		}
 
@@ -378,7 +389,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 				             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 				             _("'%s' is not a number"),
 				             priv->network_id);
-				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NETWORK_ID);
+//				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_NETWORK_ID);
+				nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                        NM_SETTING_GSM_NETWORK_ID);
 				return FALSE;
 			}
 		}
@@ -389,7 +402,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_DEVICE_ID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_DEVICE_ID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                NM_SETTING_GSM_DEVICE_ID);
 		return FALSE;
 	}
 
@@ -398,7 +413,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_ID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_ID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                NM_SETTING_GSM_SIM_ID);
 		return FALSE;
 	}
 
@@ -411,7 +428,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			                     NM_CONNECTION_ERROR,
 			                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			                     _("property is empty or wrong size"));
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_OPERATOR_ID);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_OPERATOR_ID);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                    NM_SETTING_GSM_SIM_OPERATOR_ID);
 			return FALSE;
 		}
 
@@ -421,7 +440,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 				                     NM_CONNECTION_ERROR,
 				                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 				                     _("property must contain only digits"));
-				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_OPERATOR_ID);
+//				g_prefix_error (error, "%s.%s: ", NM_SETTING_GSM_SETTING_NAME, NM_SETTING_GSM_SIM_OPERATOR_ID);
+				nm_utils_set_prefix_error_for_property (error, NM_SETTING_GSM_SETTING_NAME,
+                                                        NM_SETTING_GSM_SIM_OPERATOR_ID);
 				return FALSE;
 			}
 		}
diff --git a/libnm-core/nm-setting-ip-tunnel.c b/libnm-core/nm-setting-ip-tunnel.c
index 41314f5..58f6301 100644
--- a/libnm-core/nm-setting-ip-tunnel.c
+++ b/libnm-core/nm-setting-ip-tunnel.c
@@ -338,7 +338,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%d' is not a valid tunnel mode"),
 		             (int) priv->mode);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_MODE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_MODE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_MODE);
 		return FALSE;
 	}
 
@@ -350,8 +352,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("'%s' is neither an UUID nor an interface name"),
 		             priv->parent);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-		                NM_SETTING_IP_TUNNEL_PARENT);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//		                NM_SETTING_IP_TUNNEL_PARENT);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_PARENT);
 		return FALSE;
 	}
 
@@ -362,7 +366,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             _("'%s' is not a valid IPv%c address"),
 		             priv->local,
 		             family == AF_INET ? '4' : '6');
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_LOCAL);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_LOCAL);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_LOCAL);
 		return FALSE;
 	}
 
@@ -371,7 +377,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is missing"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_REMOTE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_REMOTE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_REMOTE);
 		return FALSE;
 	}
 
@@ -382,7 +390,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             _("'%s' is not a valid IPv%c address"),
 		             priv->remote,
 		             family == AF_INET ? '4' : '6');
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_REMOTE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME, NM_SETTING_IP_TUNNEL_REMOTE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_REMOTE);
 		return FALSE;
 	}
 
@@ -411,8 +421,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' is not a valid tunnel key"),
 			             priv->input_key);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-			                NM_SETTING_IP_TUNNEL_INPUT_KEY);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//			                NM_SETTING_IP_TUNNEL_INPUT_KEY);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                    NM_SETTING_IP_TUNNEL_INPUT_KEY);
 			return FALSE;
 		}
 	}
@@ -427,8 +439,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' is not a valid tunnel key"),
 			             priv->output_key);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-			                NM_SETTING_IP_TUNNEL_OUTPUT_KEY);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//			                NM_SETTING_IP_TUNNEL_OUTPUT_KEY);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                    NM_SETTING_IP_TUNNEL_OUTPUT_KEY);
 			return FALSE;
 		}
 	}
@@ -438,8 +452,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("a fixed TTL is allowed only when path MTU discovery is enabled"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-		                NM_SETTING_IP_TUNNEL_TTL);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//		                NM_SETTING_IP_TUNNEL_TTL);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_TTL);
 		return FALSE;
 	}
 
@@ -452,8 +468,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("some flags are invalid for the select mode: %s"),
 		             nm_utils_enum_to_str (nm_ip_tunnel_flags_get_type (), flags));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-		                NM_SETTING_IP_TUNNEL_FLAGS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//		                NM_SETTING_IP_TUNNEL_FLAGS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_FLAGS);
 		return FALSE;
 	}
 
@@ -466,8 +484,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("wired setting not allowed for mode %s"),
 		             nm_utils_enum_to_str (nm_ip_tunnel_mode_get_type (), priv->mode));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
-		                NM_SETTING_IP_TUNNEL_MODE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_IP_TUNNEL_SETTING_NAME,
+                                                NM_SETTING_IP_TUNNEL_MODE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_IP_TUNNEL_SETTING_NAME,
+//		                NM_SETTING_IP_TUNNEL_MODE);
 		return NM_SETTING_VERIFY_NORMALIZABLE_ERROR;
 	}
 
diff --git a/libnm-core/nm-setting-macsec.c b/libnm-core/nm-setting-macsec.c
index 5c46822..8b1de08 100644
--- a/libnm-core/nm-setting-macsec.c
+++ b/libnm-core/nm-setting-macsec.c
@@ -311,7 +311,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 					             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 					             _("'%s' value doesn't match '%s=%s'"),
 					             priv->parent, NM_SETTING_CONNECTION_MASTER, master);
-					g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+//					g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+					nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                            NM_SETTING_MACSEC_PARENT);
+
 					return FALSE;
 				}
 			}
@@ -322,7 +325,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' is neither an UUID nor an interface name"),
 			             priv->parent);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                    NM_SETTING_MACSEC_PARENT);
 			return FALSE;
 		}
 	} else {
@@ -336,18 +341,24 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 			             _("property is not specified and neither is '%s:%s'"),
 			             NM_SETTING_WIRED_SETTING_NAME, NM_SETTING_WIRED_MAC_ADDRESS);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PARENT);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                    NM_SETTING_MACSEC_PARENT);
 			return FALSE;
 		}
 	}
 
 	if (priv->mode == NM_SETTING_MACSEC_MODE_PSK) {
 		if (!verify_macsec_key (priv->mka_ckn, FALSE, error)) {
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MKA_CKN);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MKA_CKN);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                    NM_SETTING_MACSEC_MKA_CKN);
 			return FALSE;
 		}
 		if (!verify_macsec_key (priv->mka_cak, TRUE, error)) {
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MKA_CAK);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MKA_CAK);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                    NM_SETTING_MACSEC_MKA_CAK);
 			return FALSE;
 		}
 	} else if (priv->mode == NM_SETTING_MACSEC_MODE_EAP) {
@@ -365,7 +376,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("must be either psk (0) or eap (1)"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MODE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_MODE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                NM_SETTING_MACSEC_MODE);
 		return FALSE;
 	}
 
@@ -375,7 +388,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		             _("invalid port %d"),
 		             priv->port);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PORT);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME, NM_SETTING_MACSEC_PORT);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                NM_SETTING_MACSEC_PORT);
 		return FALSE;
 	}
 
@@ -385,8 +400,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("only valid for psk mode"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME,
-		                priv->mka_cak ? NM_SETTING_MACSEC_MKA_CAK : NM_SETTING_MACSEC_MKA_CKN);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_MACSEC_SETTING_NAME,
+//		                priv->mka_cak ? NM_SETTING_MACSEC_MKA_CAK : NM_SETTING_MACSEC_MKA_CKN);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_MACSEC_SETTING_NAME,
+                                                priv->mka_cak ? NM_SETTING_MACSEC_MKA_CAK : NM_SETTING_MACSEC_MKA_CKN);
 		return NM_SETTING_VERIFY_NORMALIZABLE;
 	}
 
diff --git a/libnm-core/nm-setting-pppoe.c b/libnm-core/nm-setting-pppoe.c
index 793d93c..d737105 100644
--- a/libnm-core/nm-setting-pppoe.c
+++ b/libnm-core/nm-setting-pppoe.c
@@ -157,14 +157,16 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_MISSING_PROPERTY,
 		                     _("property is missing"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
 		return FALSE;
 	} else if (!strlen (priv->username)) {
 		g_set_error_literal (error,
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_USERNAME);
 		return FALSE;
 	}
 
@@ -173,7 +175,8 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("property is empty"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_SERVICE);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_SERVICE);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_SERVICE);
 		return FALSE;
 	}
 
@@ -183,7 +186,8 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR,
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             "'%s': %s", priv->parent, local_error->message);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_PARENT);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_PARENT);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_PPPOE_SETTING_NAME, NM_SETTING_PPPOE_PARENT);
 		return FALSE;
 	}
 
diff --git a/libnm-core/nm-setting-team.c b/libnm-core/nm-setting-team.c
index 3d15146..59d7fec 100644
--- a/libnm-core/nm-setting-team.c
+++ b/libnm-core/nm-setting-team.c
@@ -1151,18 +1151,22 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		if (strlen (priv->config) > 1*1024*1024) {
 			g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("team config exceeds size limit"));
-			g_prefix_error (error,
-			                "%s.%s: ",
-			                NM_SETTING_TEAM_SETTING_NAME,
-			                NM_SETTING_TEAM_CONFIG);
+//			g_prefix_error (error,
+//			                "%s.%s: ",
+//			                NM_SETTING_TEAM_SETTING_NAME,
+//			                NM_SETTING_TEAM_CONFIG);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_TEAM_SETTING_NAME,
+                                                    NM_SETTING_TEAM_CONFIG);
 			return FALSE;
 		}
 
 		if (!nm_utils_is_json_object (priv->config, error)) {
-			g_prefix_error (error,
-			                "%s.%s: ",
-			                NM_SETTING_TEAM_SETTING_NAME,
-			                NM_SETTING_TEAM_CONFIG);
+//			g_prefix_error (error,
+//			                "%s.%s: ",
+//			                NM_SETTING_TEAM_SETTING_NAME,
+//			                NM_SETTING_TEAM_CONFIG);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_TEAM_SETTING_NAME,
+                                                    NM_SETTING_TEAM_CONFIG);
 			/* We treat an empty string as no config for compatibility. */
 			return *priv->config ? FALSE : NM_SETTING_VERIFY_NORMALIZABLE;
 		}
@@ -1178,7 +1182,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_INVALID_SETTING,
 		                     _("invalid runner \"%s\""), priv->runner);
 
-		g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting), NM_SETTING_TEAM_RUNNER);
+//		g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting), NM_SETTING_TEAM_RUNNER);
+		nm_utils_set_prefix_error_for_property (error, nm_setting_get_name (setting),
+                                                NM_SETTING_TEAM_RUNNER);
 		return FALSE;
 	}
 
@@ -1190,8 +1196,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		if (!name) {
 			g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_MISSING_SETTING,
 				     _("missing link watcher name"));
-			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
-					NM_SETTING_TEAM_LINK_WATCHERS);
+//			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
+//					NM_SETTING_TEAM_LINK_WATCHERS);
+			nm_utils_set_prefix_error_for_property (error, nm_setting_get_name (setting),
+                                                    NM_SETTING_TEAM_LINK_WATCHERS);
 			return FALSE;
 		}
 		if (!NM_IN_STRSET (name,
@@ -1200,8 +1208,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                   NM_TEAM_LINK_WATCHER_NSNA_PING)) {
 			g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_INVALID_SETTING,
 				     _("unknown link watcher \"%s\""), name);
-			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
-					NM_SETTING_TEAM_LINK_WATCHERS);
+//			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
+//					NM_SETTING_TEAM_LINK_WATCHERS);
+			nm_utils_set_prefix_error_for_property (error, nm_setting_get_name (setting),
+                                                    NM_SETTING_TEAM_LINK_WATCHERS);
 			return FALSE;
 		}
 
@@ -1211,16 +1221,21 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		    && !nm_team_link_watcher_get_target_host (link_watcher)) {
 			g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_MISSING_SETTING,
 				     _("missing target host"));
-			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
-					NM_SETTING_TEAM_LINK_WATCHERS);
+//			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
+//					NM_SETTING_TEAM_LINK_WATCHERS);
+			nm_utils_set_prefix_error_for_property (error, nm_setting_get_name (setting),
+                                                    NM_SETTING_TEAM_LINK_WATCHERS);
 			return FALSE;
 		}
 		if (nm_streq (name, NM_TEAM_LINK_WATCHER_ARP_PING)
 		    && !nm_team_link_watcher_get_source_host (link_watcher)) {
 			g_set_error (error, NM_CONNECTION_ERROR, NM_CONNECTION_ERROR_MISSING_SETTING,
 				     _("missing source address"));
-			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
-					NM_SETTING_TEAM_LINK_WATCHERS);
+//			g_prefix_error (error, "%s.%s: ", nm_setting_get_name (setting),
+//					NM_SETTING_TEAM_LINK_WATCHERS);
+			nm_utils_set_prefix_error_for_property (error, nm_setting_get_name (setting),
+                                                    NM_SETTING_TEAM_LINK_WATCHERS);
+
 			return FALSE;
 		}
 	}
diff --git a/libnm-core/nm-setting-vlan.c b/libnm-core/nm-setting-vlan.c
index 1b61da5..8106362 100644
--- a/libnm-core/nm-setting-vlan.c
+++ b/libnm-core/nm-setting-vlan.c
@@ -631,7 +631,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 					             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 					             _("'%s' value doesn't match '%s=%s'"),
 					             priv->parent, NM_SETTING_CONNECTION_MASTER, master);
-					g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+//					g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+					nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                            NM_SETTING_VLAN_PARENT);
 					return FALSE;
 				}
 			}
@@ -642,7 +644,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 			             _("'%s' is neither an UUID nor an interface name"),
 			             priv->parent);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                    NM_SETTING_VLAN_PARENT);
 			return FALSE;
 		}
 	} else {
@@ -656,7 +660,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 			             NM_CONNECTION_ERROR_MISSING_PROPERTY,
 			             _("property is not specified and neither is '%s:%s'"),
 			             NM_SETTING_WIRED_SETTING_NAME, NM_SETTING_WIRED_MAC_ADDRESS);
-			g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+//			g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_PARENT);
+			nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                    NM_SETTING_VLAN_PARENT);
 			return FALSE;
 		}
 	}
@@ -667,7 +673,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		             NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		             _("the vlan id must be in range 0-4094 but is %u"),
 		             priv->id);
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_ID);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_ID);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                NM_SETTING_VLAN_ID);
 		return FALSE;
 	}
 
@@ -676,7 +684,9 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_INVALID_PROPERTY,
 		                     _("flags are invalid"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_FLAGS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_FLAGS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                NM_SETTING_VLAN_FLAGS);
 		return FALSE;
 	}
 
@@ -688,7 +698,10 @@ verify (NMSetting *setting, NMConnection *connection, GError **error)
 		                     NM_CONNECTION_ERROR,
 		                     NM_CONNECTION_ERROR_SETTING_NOT_FOUND,
 		                     _("vlan setting should have a ethernet setting as well"));
-		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_FLAGS);
+//		g_prefix_error (error, "%s.%s: ", NM_SETTING_VLAN_SETTING_NAME, NM_SETTING_VLAN_FLAGS);
+		nm_utils_set_prefix_error_for_property (error, NM_SETTING_VLAN_SETTING_NAME,
+                                                NM_SETTING_VLAN_FLAGS);
+
 		return NM_SETTING_VERIFY_NORMALIZABLE;
 	}
 
diff --git a/libnm-core/nm-utils.c b/libnm-core/nm-utils.c
index f75276c..0bd881f 100644
--- a/libnm-core/nm-utils.c
+++ b/libnm-core/nm-utils.c
@@ -6471,6 +6471,21 @@ success:
 	return (((gint64) ts.tv_sec) * 1000) + (ts.tv_nsec / 1000000);
 }
 
+void
+nm_utils_set_prefix_error_for_property (GError     **error,
+                                        const char  *prop1,
+                                        const char  *prop2)
+{
+	char *err_msg;
+
+	if (!error) return;
+
+	err_msg = g_strdup_printf ("%s.%s: ", prop1, prop2);
+	g_prefix_error (error, "%s", _(err_msg));
+
+	g_free (err_msg);
+}
+
 /*****************************************************************************/
 
 /**
diff --git a/libnm-core/nm-utils.h b/libnm-core/nm-utils.h
index cf9572b..bdf911f 100644
--- a/libnm-core/nm-utils.h
+++ b/libnm-core/nm-utils.h
@@ -188,6 +188,10 @@ gboolean    nm_utils_is_valid_iface_name (const char *name, GError **error);
 
 gboolean nm_utils_is_uuid (const char *str);
 
+void     nm_utils_set_prefix_error_for_property (GError     **error,
+                                                 const char  *prop1,
+                                                 const char  *prop2);
+
 /**
  * NM_UTILS_INET_ADDRSTRLEN:
  *
